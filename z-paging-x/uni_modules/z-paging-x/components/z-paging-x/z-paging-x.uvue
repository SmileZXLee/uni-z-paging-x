 <!--                        _             
  ____     _ __   __ _  __ _(_)_ __   __ _ 
 |_  /____| '_ \ / _` |/ _` | | '_ \ / _` |
  / /_____| |_) | (_| | (_| | | | | | (_| |
 /___|    | .__/ \__,_|\__, |_|_| |_|\__, |
          |_|          |___/         |___/ -X
		  
v0.1.0 (2024-01-01)
by ZXLee
-->
<!-- 文档地址：https://z-paging.zxlee.cn -->
<!-- github地址：https://github.com/SmileZXLee/uni-z-paging-x -->
<!-- dcloud地址：https://ext.dcloud.net.cn/plugin?name=z-paging-x -->
<!-- 反馈QQ群：371624008 -->

<template name="z-paging-x">
	<view :class="{'zpx-content':true, 'zpx-content-fixed':fixed}" :style="[pagingStyle]">
		<!-- 顶部固定的slot -->
		<slot name="top" />
		<list-view class="zpx-list-view zpx-flex1" 
		:refresher-enabled="refresherEnabled" :refresher-threshold="finalRefresherThreshold" :refresher-triggered="refresherTriggered" :refresher-default-style="useCustomRefresher ? 'none' : 'black'" :custom-nested-scroll="true"
		@refresherpulling="_onRefresherpulling" @refresherrefresh="_onRefresherrefresh" @scrolltolower="_onScrolltolower">
			<slot />
			<list-item>
			    <z-paging-load-more v-if="showLoadMore" :status="loadMoreStatus" :default-text="loadMoreDefaultText" :loading-text="loadMoreLoadingText" :no-more-text="loadMoreNoMoreText" :fail-text="loadMoreFailText" @clickMore="_handleLoadMore"/>
			</list-item>
			<list-item slot="refresher">
				<view class="zpx-list-refresher">
					<slot v-if="$slots['refresher']" :refresherStatus="refresherStatus" name="refresher" />
					<z-paging-refresher :default-text="refresherDefaultText" :pulling-text="refresherPullingText" :refreshing-text="refresherRefreshingText" v-else :status="refresherStatus"/>
				</view>
			</list-item>
			<list-item :class="{'zpx-flex1': showEmpty}">
				<z-paging-x-empty v-if="showEmpty"/>
			</list-item>
		</list-view>
		<slot name="bottom" />
	</view>
</template>

<script lang="uts"> 
	import zPagingRefresher from './components/z-paging-refresher.uvue'
	import zPagingLoadMore from './components/z-paging-load-more.uvue'
	import zPagingXEmpty from '../z-paging-x-empty/z-paging-x-empty.uvue'
	import Enum from './enums/index.uts'
	export default {
		components: { zPagingRefresher, zPagingLoadMore, zPagingXEmpty },
		props: {
			// 自定义初始的pageNo，默认为1
			defaultPageNo: {
				type: Number,
				default: 1
			},
			// 自定义pageSize，默认为10
			defaultPageSize: {
				type: Number,
				default: 10
			},
			// 设置组件的style
			pagingStyle: {
				type: Object,
				default: {}
			},
			// 是否开启自定义下拉刷新，默认为是
			refresherEnabled: {
				type: Boolean,
				default: true
			},
			// 设置自定义下拉刷新阈值，默认等于refresher高度
			refresherThreshold: {
				type: Number,
				default: 0
			},
			// 自定义下拉刷新默认状态下的文字，默认：继续下拉刷新
			refresherDefaultText: {
				type: String,
				default: '继续下拉刷新'
			},
			// 自定义下拉刷新松手立即刷新状态下的文字，默认：松开立即刷新
			refresherPullingText: {
				type: String,
				default: '松开立即刷新'
			},
			// 自定义下拉刷新刷新中状态下的文字，默认：正在刷新...
			refresherRefreshingText: {
				type: String,
				default: '正在刷新...'
			},
			// 是否使用自定义的下拉刷新，默认为是，即使用z-paging-x的下拉刷新。设置为false即代表使用unix自带的下拉刷新
			useCustomRefresher: {
				type: Boolean,
				default: true
			},
			// 是否启用加载更多数据(含滑动到底部加载更多数据和点击加载更多数据)，默认为是
			loadMoreEnabled: {
				type: Boolean,
				default: true
			},
			//滑动到底部"默认"文字，默认：点击加载更多
			loadMoreDefaultText: {
				type: String,
				default: '点击加载更多'
			},
			//滑动到底部"加载中"文字，默认：正在加载...
			loadMoreLoadingText: {
				type: String,
				default: '正在加载...'
			},
			//滑动到底部"没有更多"文字，默认：没有更多了
			loadMoreNoMoreText: {
				type: String,
				default: '没有更多了'
			},
			//滑动到底部"加载失败"文字，默认：加载失败，点击重新加载
			loadMoreFailText: {
				type: String,
				default: '加载失败，点击重新加载'
			},
			// mounted后自动调用reload方法(mounted后自动调用接口)，默认为是
			auto: {
				type: Boolean,
				default: true
			},
			// 是否使用fixed布局，若使用fixed布局，则z-paging-x的父view无需固定高度，z-paging-x高度默认为100%，默认为是
			fixed: {
				type: Boolean,
				default: true
			},
		},
		data() {
			return {
				// 下拉刷新状态
				refresherStatus: Enum.Refresher.Default,
				// 底部加载更多状态
				loadMoreStatus: Enum.More.Default,
				// 当前页
				pageNo: 1,
				// 当前pageSize
				pageSize: 10,
				// 设置当前下拉刷新状态，true 表示下拉刷新已经被触发，false 表示下拉刷新未被触发
				refresherTriggered: false,
				// 是否是加载中状态
				isLoading: false,
				refresherNodeHeight: 0 as number,
				currentData: [] as Array<any>,
				totalData: [] as Array<any>,
			}
		},
		computed: {
			finalRefresherThreshold(): number {
				return this.refresherThreshold > 0 ? this.refresherThreshold : this.refresherNodeHeight > 0 ? this.refresherNodeHeight : 40;
			},
			showEmpty(): boolean {
				return this.totalData.length == 0 && !this.isLoading;
			},
			showLoadMore(): boolean {
				return this.loadMoreEnabled && (!isLoading || totalData.length > 0) && !this.showEmpty;
			}
		},
		watch: {
			defaultPageSize(newVal: number) {
				this.pageSize = newVal;
			},
			totalData(newVal: Array<any>) {
				this.$emit('update:modelValue', newVal);
			}
		},
		mounted() {
			this.pageNo = this.defaultPageNo;
			if (this.auto) {
				this._emitQuery(this.pageNo, this.pageSize);
			}
			this.$nextTick(() => {
				uni.createSelectorQuery().select('.zpx-list-refresher').boundingClientRect().exec((ret) => {
					if (ret.length > 0) {
						const refresherNode = ret[0] as NodeInfo;
						this.refresherNodeHeight = refresherNode.height ?? 0;
					}
				})
			})
		},
		methods: {
			reload() {
				this.pageNo = this.defaultPageNo;
				// this.totalData = [];
				this._emitQuery(this.pageNo, this.pageSize);
			},
			//请求结束(成功或者失败)调用此方法，将请求的结果传递给z-paging-x处理，第一个参数为请求结果数组，第二个参数为是否成功(默认是是）
			complete(data: Array<any>) {
				this.isLoading = false;
				// 设置下拉刷新状态为结束
				this.refresherTriggered = false;
				this.refresherStatus = Enum.Refresher.Default;
				const currentData: Array<any> = [...data];
				if (data.length >= this.defaultPageSize) {
					// 将底部加载更多状态设置为默认状态
					this.loadMoreStatus = Enum.More.Default;
				} else {
					// 将底部加载更多状态设置为没有更多数据
					this.loadMoreStatus = Enum.More.NoMore;
				}
				// 如果是第一页，则覆盖当前数据；如果是加载更多，则拼接数据
				this.totalData = this.pageNo === this.defaultPageNo ? currentData : this.totalData.concat(currentData);
			},
			
			
			// 下拉刷新控件被下拉事件
			_onRefresherpulling(e: RefresherEvent) {
				this.refresherStatus = e.detail.dy < this.finalRefresherThreshold ? Enum.Refresher.Default : Enum.Refresher.ReleaseToRefresh;
			},
			// 下拉刷新被触发事件
			_onRefresherrefresh(_ : RefresherEvent) {
				_handleRefresh();
			},
			// 滚动到底部事件
			_onScrolltolower() {
				this._handleLoadMore();
			},
			// 处理用户下拉刷新
			_handleRefresh() {
				this.refresherStatus = Enum.Refresher.Loading;
				this.refresherTriggered = true;
				this.pageNo = this.defaultPageNo;
				this._emitQuery(this.pageNo, this.pageSize);
			},
			// 处理加载更多数据
			_handleLoadMore() {
				if (!this.loadMoreEnabled || this.isLoading || this.loadMoreStatus === Enum.More.NoMore) return;
				// 将底部加载更多状态设置为加载中
				this.loadMoreStatus = Enum.More.Loading;
				this.pageNo ++;
				this._emitQuery(this.pageNo, this.pageSize);
			},
			// emit query事件
			_emitQuery(pageNo: number, pageSize: number){
				this.isLoading = true;
				this.$emit('query', pageNo, pageSize);
			},
		}
	}
</script>

<style scoped>
	@import "./css/z-paging-main.css";
</style>