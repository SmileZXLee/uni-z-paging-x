 <!--                        _             
  ____     _ __   __ _  __ _(_)_ __   __ _ 
 |_  /____| '_ \ / _` |/ _` | | '_ \ / _` |
  / /_____| |_) | (_| | (_| | | | | | (_| |
 /___|    | .__/ \__,_|\__, |_|_| |_|\__, |
          |_|          |___/         |___/ -X
		  
v0.1.0 (2024-01-01)
by ZXLee
-->
<!-- 文档地址：https://z-paging.zxlee.cn -->
<!-- github地址：https://github.com/SmileZXLee/uni-z-paging-x -->
<!-- dcloud地址：https://ext.dcloud.net.cn/plugin?name=z-paging-x -->
<!-- 反馈QQ群：371624008 -->

<template name="z-paging-x">
	<view :class="{'zpx-content':true, 'zpx-content-fixed':fixed}" :style="[pagingStyle]">
		<!-- 顶部固定的slot -->
		<slot name="top" />
		<list-view class="zpx-list-view zpx-flex1"
		:refresher-enabled="refresherEnabled" :refresher-threshold="finalRefresherThreshold" :refresher-triggered="refresherTriggered" :refresher-default-style="useCustomRefresher ? 'none' : 'black'" :custom-nested-scroll="true" :refresher-background="refresherBackground"
		:scroll-top="scrollTop"
		@refresherpulling="_onRefresherpulling" @refresherrefresh="_onRefresherrefresh" @scrolltolower="_onScrolltolower" @scroll="_onScroll">
			<slot />
			<list-item>
			    <z-paging-load-more v-if="showLoadMore" :status="loadMoreStatus" :default-text="loadMoreDefaultText" :loading-text="loadMoreLoadingText" :no-more-text="loadMoreNoMoreText" :fail-text="loadMoreFailText" @clickMore="_handleLoadMore"/>
			</list-item>
			<list-item slot="refresher">
				<view class="zpx-list-refresher">
					<slot v-if="$slots['refresher']" :refresherStatus="refresherStatus" name="refresher" />
					<z-paging-refresher ref="commonRefresher" :default-text="refresherDefaultText" :pulling-text="refresherPullingText" :refreshing-text="refresherRefreshingText" v-else :status="refresherStatus" :show-update-time="showRefresherUpdateTime" :update-time-key="refresherUpdateTimeKey" :time-text-timestamp="refresherTimeTextTimestamp"/>
				</view>
			</list-item>
			<list-item class="zpx-flex1">
				<z-paging-x-empty :empty-text="emptyText" :empty-img="emptyImg" v-if="showEmpty"/>
			</list-item>
		</list-view>
		<!-- 底部固定的slot -->
		<slot name="bottom" />
		<!-- 点击返回顶部view -->
		<view v-if="showBackToTopClass" :class="backToTopClass" :style="[backToTopStyle]" @click.stop="_onBackToTopClick">
			<slot v-if="$slots['backToTop']" name="backToTop" />
			<image v-else class="zpx-back-to-top-img" :src="backToTopImg.length > 0 ? backToTopImg : base64BackToTop" />
		</view>
	</view>
</template>

<script lang="uts"> 
	import zPagingRefresher from './components/z-paging-refresher.uvue'
	import zPagingLoadMore from './components/z-paging-load-more.uvue'
	import zPagingXEmpty from '../z-paging-x-empty/z-paging-x-empty.uvue'
	import Enum from './enums/index.uts'
	import { base64BackToTop } from './static/index.uts'
	import { updateRefesrherTime, getTime } from './utils/index.uts'
	export default {
		components: { zPagingRefresher, zPagingLoadMore, zPagingXEmpty },
		props: {
			// 自定义初始的pageNo，默认为1
			defaultPageNo: {
				type: Number,
				default: 1
			},
			// 自定义pageSize，默认为10
			defaultPageSize: {
				type: Number,
				default: 10
			},
			// 设置组件的style
			pagingStyle: {
				type: Object,
				default: {}
			},
			// 是否开启自定义下拉刷新，默认为是
			refresherEnabled: {
				type: Boolean,
				default: true
			},
			// 设置自定义下拉刷新阈值，默认等于refresher高度，单位为px
			refresherThreshold: {
				type: Number,
				default: 0
			},
			// 自定义下拉刷新默认状态下的文字，默认：继续下拉刷新
			refresherDefaultText: {
				type: String,
				default: '继续下拉刷新'
			},
			// 自定义下拉刷新松手立即刷新状态下的文字，默认：松开立即刷新
			refresherPullingText: {
				type: String,
				default: '松开立即刷新'
			},
			// 自定义下拉刷新刷新中状态下的文字，默认：正在刷新...
			refresherRefreshingText: {
				type: String,
				default: '正在刷新...'
			},
			// 下拉刷新区域背景颜色
			refresherBackground: {
				type: String,
				default: '#FFF'
			},
			// 是否使用自定义的下拉刷新，默认为是，即使用z-paging-x的下拉刷新。设置为false即代表使用unix自带的下拉刷新
			useCustomRefresher: {
				type: Boolean,
				default: true
			},
			// 列表刷新时自动显示下拉刷新view，默认为否
			showRefresherWhenReload: {
				type: Boolean,
				default: false
			},
			// 是否显示最后更新时间，默认为否
			showRefresherUpdateTime: {
				type: Boolean,
				default: false
			},
			// 如果需要区别不同页面的最后更新时间，请为不同页面的z-paging-x的`refresher-update-time-key`设置不同的字符串
			refresherUpdateTimeKey: {
				type: String,
				default: 'default'
			},
			// 是否启用加载更多数据(含滑动到底部加载更多数据和点击加载更多数据)，默认为是
			loadMoreEnabled: {
				type: Boolean,
				default: true
			},
			// 滑动到底部"默认"文字，默认：点击加载更多
			loadMoreDefaultText: {
				type: String,
				default: '点击加载更多'
			},
			// 滑动到底部"加载中"文字，默认：正在加载...
			loadMoreLoadingText: {
				type: String,
				default: '正在加载...'
			},
			// 滑动到底部"没有更多"文字，默认：没有更多了
			loadMoreNoMoreText: {
				type: String,
				default: '没有更多了'
			},
			// 滑动到底部"加载失败"文字，默认：加载失败，点击重新加载
			loadMoreFailText: {
				type: String,
				default: '加载失败，点击重新加载'
			},
			// mounted后自动调用reload方法(mounted后自动调用接口)，默认为是
			auto: {
				type: Boolean,
				default: true
			},
			// 是否使用fixed布局，若使用fixed布局，则z-paging-x的父view无需固定高度，z-paging-x高度默认为100%，默认为是
			fixed: {
				type: Boolean,
				default: true
			},
			// 空数据描述文字
			emptyText: {
				type: String,
				default: '没有数据哦~'
			},
			// 空数据图片
			emptyImg: {
				type: String,
				default: ''
			},
			//自动显示点击返回顶部按钮，默认为否
			showBackToTop: {
				type: Boolean,
				default: false
			},
			//点击返回顶部按钮显示/隐藏的阈值(滚动距离)，单位为px，默认为300px
			backToTopThreshold: {
				type: Number,
				default: 300
			},
			//点击返回顶部按钮的自定义图片地址，默认使用z-paging内置的图片
			backToTopImg: {
				type: String,
				default: ''
			},
			// 点击返回顶部按钮的style
			backToTopStyle: {
				type: Object,
				default: {},
			},
		},
		data() {
			return {
				// 下拉刷新状态
				refresherStatus: Enum.Refresher.Default,
				// 设置当前下拉刷新状态，true 表示下拉刷新已经被触发，false 表示下拉刷新未被触发
				refresherTriggered: false,
				// refresher节点高度
				refresherNodeHeight: 0 as number,
				// 下拉刷新最后更新时间更新的时间戳
				refresherTimeTextTimestamp: 0,
				// 底部加载更多状态
				loadMoreStatus: Enum.More.Default,
				
				// 是否是加载中状态
				isLoading: true,
				// 竖向滚动条位置
				scrollTop: 0,
				// 记录当前滚动位置
				oldScrollTop: 0,
				
				// 当前页
				pageNo: 1,
				// 当前pageSize
				pageSize: 10,
				// 当前列表总数据
				totalData: [] as Array<any>,
				
				// 默认的点击返回顶部图片
				base64BackToTop: base64BackToTop,
				backToTopClass: 'zpx-back-to-top zpx-back-to-top-hide',
				lastBackToTopShowTime: 0,
				showBackToTopClass: false,
				
			}
		},
		computed: {
			finalRefresherThreshold(): number {
				return this.refresherThreshold > 0 ? this.refresherThreshold : this.refresherNodeHeight > 0 ? this.refresherNodeHeight : 40;
			},
			showEmpty(): boolean {
				return this.totalData.length == 0 && !this.isLoading;
			},
			showLoadMore(): boolean {
				return this.loadMoreEnabled && (!isLoading || totalData.length > 0) && !this.showEmpty;
			}
		},
		watch: {
			defaultPageSize(newVal: number) {
				this.pageSize = newVal;
			},
			totalData(newVal: Array<any>) {
				this.$emit('update:modelValue', newVal);
			}
		},
		mounted() {
			this.pageNo = this.defaultPageNo;
			if (this.auto) {
				this.reload();
			}
			// 更新缓存的refresher高度
			this.$nextTick(() => {
				uni.createSelectorQuery().select('.zpx-list-refresher').boundingClientRect().exec((ret) => {
					if (ret.length > 0) {
						const refresherNode = ret[0] as NodeInfo;
						this.refresherNodeHeight = refresherNode.height ?? 0;
					}
				})
			})
		},
		methods: {
			// 刷新列表数据
			reload() {
				this.pageNo = this.defaultPageNo;
				if (this.showRefresherWhenReload) {
					this.$nextTick(() => {
						this.refresherTriggered = true;
					})
					return;
				}
				// 清空数组会有一个空指针异常，很诡异，因此先注释掉
				// this.totalData = [];
				this._emitQuery(this.pageNo, this.pageSize);
			},
			// 请求结束(成功或者失败)调用此方法，将请求的结果传递给z-paging-x处理，第一个参数为请求结果数组，第二个参数为是否成功(默认是是）
			complete(data: Array<any>) {
				this.isLoading = false;
				// 设置下拉刷新状态为结束
				this.refresherTriggered = false;
				this.refresherStatus = Enum.Refresher.Default;
				const currentData: Array<any> = [...data];
				if (data.length >= this.defaultPageSize) {
					// 将底部加载更多状态设置为默认状态
					this.loadMoreStatus = Enum.More.Default;
				} else {
					// 将底部加载更多状态设置为没有更多数据
					this.loadMoreStatus = Enum.More.NoMore;
				}
				// 如果是第一页，则覆盖当前数据；如果是加载更多，则拼接数据
				if (this.pageNo === this.defaultPageNo) {
					this.totalData = currentData;
					if (this.showRefresherUpdateTime) {
						// 更新数据刷新时间
						updateRefesrherTime(this.refresherUpdateTimeKey);
						this.refresherTimeTextTimestamp = getTime();
					}
				} else {
					this.totalData = this.totalData.concat(currentData);
				}
			},
			// 滚动到顶部
			scrollToTop() {
				this.scrollTop = this.oldScrollTop;
				this.$nextTick(() => {
					this.scrollTop = 0
				})
				this._checkShouldShowBackToTop(this.scrollTop);
			},
			
			// 下拉刷新控件被下拉事件
			_onRefresherpulling(e: RefresherEvent) {
				this.refresherStatus = e.detail.dy < this.finalRefresherThreshold ? Enum.Refresher.Default : Enum.Refresher.ReleaseToRefresh;
			},
			// 下拉刷新被触发事件
			_onRefresherrefresh(_: RefresherEvent) {
				_handleRefresh();
			},
			// 滚动到底部事件
			_onScrolltolower() {
				this._handleLoadMore();
			},
			// 列表正在滚动事件
			_onScroll(e: ScrollEvent) {
				this.$emit('scroll', e);
				this.oldScrollTop = e.detail.scrollTop;
				this._checkShouldShowBackToTop(this.oldScrollTop);
			},
			// 处理用户下拉刷新
			_handleRefresh() {
				this.refresherStatus = Enum.Refresher.Loading;
				this.refresherTriggered = true;
				this.pageNo = this.defaultPageNo;
				this._emitQuery(this.pageNo, this.pageSize);
			},
			// 处理加载更多数据
			_handleLoadMore() {
				if (!this.loadMoreEnabled || this.isLoading || this.loadMoreStatus === Enum.More.NoMore) return;
				// 将底部加载更多状态设置为加载中
				this.loadMoreStatus = Enum.More.Loading;
				this.pageNo ++;
				this._emitQuery(this.pageNo, this.pageSize);
			},
			// emit query事件
			_emitQuery(pageNo: number, pageSize: number){
				this.isLoading = true;
				this.$emit('query', pageNo, pageSize);
			},
			
			//判断是否要显示返回顶部按钮
			_checkShouldShowBackToTop(scrollTop: number) {
				if (!this.showBackToTop) {
					this.showBackToTopClass = false;
					return;
				}
				if (scrollTop > this.backToTopThreshold) {
					if (!this.showBackToTopClass) {
						this.showBackToTopClass = true;
						this.lastBackToTopShowTime = new Date().getTime();
						setTimeout(() => {
							this.backToTopClass = 'zpx-back-to-top zpx-back-to-top-show';
						}, 300)
					}
				} else {
					if (this.showBackToTopClass) {
						this.backToTopClass = 'zpx-back-to-top zpx-back-to-top-hide';
						setTimeout(() => {
							this.showBackToTopClass = false;
						}, new Date().getTime() - this.lastBackToTopShowTime < 500 ? 0 : 300)
					}
				}
			},
			//点击返回顶部
			_onBackToTopClick() {
				let callbacked: boolean = false;
				this.$emit('backToTopClick', (toTop: boolean) => {
					if (toTop != false) {
						this._handleToTop();
					}
					callbacked = true;
				});
				this.$nextTick(() => {
					if (!callbacked) {
						this._handleToTop();
					}
				})
			},
			//处理滚动到顶部
			_handleToTop() {
				this.scrollToTop();
			},
		}
	}
</script>

<style scoped>
	@import "./css/z-paging-main.css";
</style>